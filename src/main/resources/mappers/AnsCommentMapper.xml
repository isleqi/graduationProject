<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.isleqi.graduationproject.dao.mappers.AnsCommentMapper" >
  <resultMap id="BaseResultMap" type="com.isleqi.graduationproject.domain.AnsComment" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="ans_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="like_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="creat_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="reply_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.isleqi.graduationproject.domain.AnsComment" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="ans_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="like_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="creat_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="comment_content" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
      <arg column="reply_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>

  <resultMap id="ResultMapWithUser" type="com.isleqi.graduationproject.domain.vo.AnsCommentVo" >

    <id column="id" property="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result column="ans_id" property="ansId" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result column="user_id" property="userId" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result column="like_num" property="likeNum" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result column="creat_time" property="creatTime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    <result column="reply_num" property="replyNum" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result column="comment_content" property="commentContent" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    <association property="user" column="user_id" select="com.isleqi.graduationproject.dao.mappers.UserMapper.selectByPrimaryKey" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, ans_id, user_id, like_num, creat_time,reply_num
  </sql>
  <sql id="Blob_Column_List" >
    comment_content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithUser" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ans_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByAnsId" resultMap="ResultMapWithUser" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ans_comment
    where ans_id = #{ansId,jdbcType=INTEGER} order by creat_time desc
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ans_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.isleqi.graduationproject.domain.AnsComment" >
    insert into ans_comment (id, ans_id, user_id, 
      like_num, creat_time, comment_content
      )
    values (#{id,jdbcType=INTEGER}, #{ansId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{likeNum,jdbcType=INTEGER}, #{creatTime,jdbcType=TIMESTAMP}, #{commentContent,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.isleqi.graduationproject.domain.AnsComment" useGeneratedKeys="true" keyProperty="id" >
    insert into ans_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="ansId != null" >
        ans_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="likeNum != null" >
        like_num,
      </if>

        creat_time,

      <if test="commentContent != null" >
        comment_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="ansId != null" >
        #{ansId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="likeNum != null" >
        #{likeNum,jdbcType=INTEGER},
      </if>
      now(),
      <if test="commentContent != null" >
        #{commentContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.isleqi.graduationproject.domain.AnsComment" >
    update ans_comment
    <set >
      <if test="ansId != null" >
        ans_id = #{ansId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="likeNum != null" >
        like_num = #{likeNum,jdbcType=INTEGER},
      </if>
      <if test="creatTime != null" >
        creat_time = #{creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentContent != null" >
        comment_content = #{commentContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.isleqi.graduationproject.domain.AnsComment" >
    update ans_comment
    set ans_id = #{ansId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      like_num = #{likeNum,jdbcType=INTEGER},
      creat_time = #{creatTime,jdbcType=TIMESTAMP},
      comment_content = #{commentContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.isleqi.graduationproject.domain.AnsComment" >
    update ans_comment
    set ans_id = #{ansId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      like_num = #{likeNum,jdbcType=INTEGER},
      creat_time = #{creatTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="addReplyNum" >
    update ans_comment
    set reply_num=reply_num+1
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>